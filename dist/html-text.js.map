{"version":3,"file":"html-text.js","sources":["../src/index.js"],"sourcesContent":["import { Sprite } from '@pixi/sprite';\nimport { settings } from '@pixi/settings';\nimport { Texture } from '@pixi/core';\nimport { Rectangle } from '@pixi/math';\nimport { trimCanvas, sign } from '@pixi/utils';\nimport { TextStyle } from '@pixi/text';\n\n/**\n * Text display object that support multi-style HTML text\n * @class\n * @memberof PIXI\n * @extends PIXI.Sprite\n * @see {@link https://pixijs.download/dev/docs/PIXI.Sprite.html PIXI.Sprite}\n * @see {@link https://pixijs.download/dev/docs/PIXI.TextStyle.html PIXI.TextStyle}\n */\nexport class HTMLText extends Sprite\n{\n    /**\n     * @constructor\n     * @param {string} [text] - Text contents\n     * @param {PIXI.TextStyle} [style] - Style settings, not all TextStyle options are supported.\n     * @param {HTMLCanvasElement} [canvas] - Optional canvas to use for rendering.\n     *.       if undefined, will generate it's own canvas using createElement.\n     */\n    constructor(text = '', style = {}, canvas)\n    {\n        if (typeof btoa === 'undefined')\n        {\n            throw new Error('Your browser doesn\\'t support base64 conversions.');\n        }\n\n        canvas = canvas || document.createElement('canvas');\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas, { scaleMode: settings.SCALE_MODE });\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        this._parser = new DOMParser();\n        this._image = new Image();\n\n        this.canvas = canvas;\n        this.context = this.canvas.getContext('2d');\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n        this._text = null;\n        this._style = null;\n        this._loading = false;\n        this.text = text;\n        this.style = style;\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Manually refresh the text.\n     * @public\n     * @param {boolean} [respectDirty=true] - Whether to abort updating the\n     *        text if the Text isn't dirty and the function is called.\n     */\n    updateText(respectDirty)\n    {\n        const { style, canvas, context, resolution } = this;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        let css = `\n            display:inline-block;\n            color:${style.fill};\n            font-size: ${style.fontSize}px;\n            font-family:${style.fontFamily};\n            font-weight:${style.fontWeight};\n            font-style:${style.fontStyle};\n            font-variant:${style.fontVariant};\n            letter-spacing:${style.letterSpacing}px;\n            text-align:${style.align};\n            padding:${style.padding}px;\n        `;\n\n        if (style.breakWords)\n        {\n            css += 'word-break:break-all;';\n        }\n\n        if (style.lineHeight)\n        {\n            css += `line-height:${style.lineHeight}px;`;\n        }\n\n        if (style.wordWrap)\n        {\n            css += 'word-wrap:break-word;';\n            css += `width:${style.wordWrapWidth}px;`;\n        }\n\n        if (style.strokeThickness)\n        {\n            css += `-webkit-text-stroke-width: ${style.strokeThickness}px;`;\n            css += `-webkit-text-stroke-color: ${style.stroke};`;\n            css += `text-stroke-width: ${style.strokeThickness}px;`;\n            css += `text-stroke-color: ${style.stroke};`;\n        }\n\n        if (style.dropShadow)\n        {\n            const x = Math.round(Math.cos(style.dropShadowAngle) * style.dropShadowDistance);\n            const y = Math.round(Math.sin(style.dropShadowAngle) * style.dropShadowDistance);\n\n            css += `text-shadow: ${x}px ${y}px ${style.dropShadowBlur}px ${style.dropShadowColor};`;\n        }\n\n        const svg = `\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"2048\" height=\"2048\">\n                <foreignObject width=\"100%\" height=\"100%\">\n                    <div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"${css}\">${this._text}</div>\n                </foreignObject>\n            </svg>\n       `;\n\n        // Used to measure to D\n        const template = this._parser.parseFromString(svg, 'text/xml');\n        const div = template.firstChild.querySelector('div');\n\n        document.body.appendChild(div);\n        const { width, height } = div.getBoundingClientRect();\n\n        document.body.removeChild(div);\n\n        canvas.width = Math.ceil((Math.max(1, width) + (style.padding * 2)) * resolution);\n        canvas.height = Math.ceil((Math.max(1, height) + (style.padding * 2)) * resolution);\n\n        context.scale(resolution, resolution);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (!this._loading)\n        {\n            const image = this._image;\n\n            this._loading = true;\n            image.src = `data:image/svg+xml;base64,${btoa(svg)}`;\n            image.onload = () =>\n            {\n                context.drawImage(\n                    image,\n                    0, 0, width, height,\n                    0, 0, width, height,\n                );\n                image.onload = undefined;\n                image.src = '';\n                this._loading = false;\n                this.updateTexture();\n            };\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Update the texture resource.\n     * @private\n     */\n    updateTexture()\n    {\n        const { canvas, context, style, texture, resolution } = this;\n\n        if (style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            canvas.width = trimmed.width;\n            canvas.height = trimmed.height;\n            context.putImageData(trimmed.data, 0, 0);\n        }\n\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = Math.ceil(canvas.width / resolution);\n        texture.trim.height = texture._frame.height = Math.ceil(canvas.height / resolution);\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     * @protected\n     */\n    _render(renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas Renderer.\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._renderCanvas(renderer);\n    }\n\n    /**\n     * Get the local bounds.\n     *\n     * @param {PIXI.Rectangle} [rect]\n     * @return {PIXI.Rectangle} Local bounds\n     */\n    getLocalBounds(rect)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds(rect);\n    }\n\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Handle dirty style changes\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Destroy this Text object. Don't use after calling.\n     * @param {boolean|object} [options=true] Same as Sprite destroy options.\n     */\n    destroy(options = true)\n    {\n        super.destroy(options);\n\n        // make sure to reset the the context and canvas..\n        // dont want this hanging around in memory!\n        this.context = null;\n        this.canvas.width = this.canvas.height = 0; // Safari hack\n        this.canvas = null;\n        this._style = null;\n    }\n\n    /**\n     * Get the width in pixels.\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * Get the height in pixels.\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The base style to render with text.\n     * @member {PIXI.Style|object}\n     */\n    get style()\n    {\n        return this._style;\n    }\n\n    set style(style) // eslint-disable-line require-jsdoc\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Contents of text. This can be HTML text.\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === '' || text === null || text === undefined ? ' ' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution()\n    {\n        return this._resolution;\n    }\n\n    set resolution(value) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],"names":["HTMLText","text","style","canvas","btoa","Error","document","createElement","width","height","const","texture","Texture","from","scaleMode","settings","SCALE_MODE","orig","Rectangle","trim","super","this","_parser","DOMParser","_image","Image","context","getContext","_resolution","RESOLUTION","_autoResolution","_text","_style","_loading","localStyleID","updateText","respectDirty","styleID","dirty","let","css","breakWords","lineHeight","wordWrap","strokeThickness","dropShadow","Math","round","cos","dropShadowAngle","dropShadowDistance","sin","svg","div","parseFromString","firstChild","querySelector","body","appendChild","getBoundingClientRect","removeChild","ceil","max","padding","resolution","scale","clearRect","image","src","onload","drawImage","undefined","updateTexture","trimmed","trimCanvas","putImageData","data","baseTexture","_frame","x","y","_onTextureUpdate","setRealSize","_render","renderer","_renderCanvas","getLocalBounds","rect","_calculateBounds","calculateVertices","_bounds","addQuad","vertexData","_onStyleChange","destroy","options","prototypeAccessors","abs","_texture","value","s","sign","_width","_height","TextStyle","String","Sprite"],"mappings":"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"}